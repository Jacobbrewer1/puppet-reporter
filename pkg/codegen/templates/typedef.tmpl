{{range .Types}}
{{if ne .TypeName .Schema.TypeDecl }}
{{- if gt (len .Schema.UnionElements) 0 }}
// {{.TypeName}} defines the model for {{.JsonName}}.
type {{.TypeName}} = any
{{- else -}}
// {{.TypeName}} defines the model for {{.JsonName}}.
type {{.TypeName}} {{if or (.IsAlias) (eq (len .Schema.EnumValues) 0) }}={{end}} {{.Schema.TypeDecl}}
{{- end }}
{{end}}
{{- if and (gt (len .Schema.EnumValues) 0) (eq .Schema.GoType "string") }}
// List of {{ .TypeName }}
const (
	{{- $typeName := .TypeName }}
    {{- range $key, $value := .Schema.EnumValues }}
    {{ $typeName }}{{ $value }} {{ $typeName }} = "{{ $value }}"
    {{- end }}
)

func (e *{{ .TypeName }}) IsValid() bool {
    if e == nil {
        return false
    }

    switch *e {
    {{- range $key, $value := .Schema.EnumValues }}
    case {{ $typeName }}{{ $value }}:
        return true
    {{- end }}
    default:
        return false
    }
}

func (e *{{ .TypeName }}) MarshalJSON() ([]byte, error) {
    if !e.IsValid() {
        return nil, uhttp.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("%s is not a valid {{ .TypeName }}", *e))
    }

    return json.Marshal(string(*e))
}

func (e *{{ .TypeName }}) UnmarshalJSON(data []byte) error {
    var s string
    if err := json.Unmarshal(data, &s); err != nil {
        return err
    }

    e2 := {{ .TypeName }}(s)
    if !e2.IsValid() {
        return uhttp.NewHTTPError(http.StatusBadRequest, fmt.Errorf("%s is not a valid {{ .TypeName }}", s))
    }

    *e = e2
    return nil
}
{{- end }}
{{end}}
