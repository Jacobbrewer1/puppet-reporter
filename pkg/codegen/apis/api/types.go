// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	externalRef0 "github.com/jacobbrewer1/pagefilter/common"
	"github.com/jacobbrewer1/uhttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// LogMessage defines the model for log_message.
type LogMessage = struct {
	Message string `json:"message"`
}

// Report defines the model for report.
type Report = struct {
	Environment    string       `json:"environment"`
	ExecutedAt     time.Time    `json:"executed_at"`
	Hash           string       `json:"hash"`
	Host           string       `json:"host"`
	Id             int64        `json:"id"`
	PuppetVersion  float32      `json:"puppet_version"`
	RuntimeSeconds int64        `json:"runtime_seconds"`
	Status         ReportStatus `json:"status"`
	TotalChanged   int64        `json:"total_changed"`
	TotalFailed    int64        `json:"total_failed"`
	TotalResources int64        `json:"total_resources"`
	TotalSkipped   int64        `json:"total_skipped"`
}

// ReportDetails defines the model for report_details.
type ReportDetails = struct {
	Logs      []LogMessage `json:"logs"`
	Report    Report       `json:"report"`
	Resources []Resource   `json:"resources"`
}

// ReportResponse defines the model for report_response.
type ReportResponse = struct {
	Reports []Report `json:"reports"`
	Total   int64    `json:"total"`
}

// ReportStatus defines the model for report_status.
type ReportStatus string

// List of ReportStatus
const (
	ReportStatusCHANGED   ReportStatus = "CHANGED"
	ReportStatusFAILED    ReportStatus = "FAILED"
	ReportStatusUNCHANGED ReportStatus = "UNCHANGED"
)

func (e *ReportStatus) IsValid() bool {
	if e == nil {
		return false
	}

	switch *e {
	case ReportStatusCHANGED:
		return true
	case ReportStatusFAILED:
		return true
	case ReportStatusUNCHANGED:
		return true
	default:
		return false
	}
}

func (e *ReportStatus) MarshalJSON() ([]byte, error) {
	if !e.IsValid() {
		return nil, uhttp.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("%s is not a valid ReportStatus", *e))
	}

	return json.Marshal(string(*e))
}

func (e *ReportStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e2 := ReportStatus(s)
	if !e2.IsValid() {
		return uhttp.NewHTTPError(http.StatusBadRequest, fmt.Errorf("%s is not a valid ReportStatus", s))
	}

	*e = e2
	return nil
}

// Resource defines the model for resource.
type Resource = struct {
	File   string `json:"file"`
	Line   int64  `json:"line"`
	Name   string `json:"name"`
	Status Status `json:"status"`
	Type   string `json:"type"`
}

// Status defines the model for status.
type Status string

// List of Status
const (
	StatusCHANGED   Status = "CHANGED"
	StatusFAILED    Status = "FAILED"
	StatusSKIPPED   Status = "SKIPPED"
	StatusUNCHANGED Status = "UNCHANGED"
)

func (e *Status) IsValid() bool {
	if e == nil {
		return false
	}

	switch *e {
	case StatusCHANGED:
		return true
	case StatusFAILED:
		return true
	case StatusSKIPPED:
		return true
	case StatusUNCHANGED:
		return true
	default:
		return false
	}
}

func (e *Status) MarshalJSON() ([]byte, error) {
	if !e.IsValid() {
		return nil, uhttp.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("%s is not a valid Status", *e))
	}

	return json.Marshal(string(*e))
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e2 := Status(s)
	if !e2.IsValid() {
		return uhttp.NewHTTPError(http.StatusBadRequest, fmt.Errorf("%s is not a valid Status", s))
	}

	*e = e2
	return nil
}

// QueryEnvironment defines the model for query_environment.
type QueryEnvironment = string

// QueryFrom defines the model for query_from.
type QueryFrom = time.Time

// QueryHost defines the model for query_host.
type QueryHost = string

// QueryState defines the model for query_state.
type QueryState = Status

// QueryTo defines the model for query_to.
type QueryTo = time.Time

// GetReportsParams defines parameters for GetReports.
type GetReportsParams struct {
	// Limit Report type
	Limit *externalRef0.LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// LastVal Pagination details, last value of the sort column on the previous page.
	LastVal *externalRef0.LastValue `form:"last_val,omitempty" json:"last_val,omitempty"`

	// LastId Pagination details, last value of the id column on the previous page.
	LastId *externalRef0.LastId `form:"last_id,omitempty" json:"last_id,omitempty"`

	// SortBy Pagination details, sort column, if empty uses the id column.
	SortBy *externalRef0.SortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortDir Pagination details, sorting order.
	SortDir *GetReportsParamsSortDir `form:"sort_dir,omitempty" json:"sort_dir,omitempty"`

	// Host Filter by host
	Host *QueryHost `form:"host,omitempty" json:"host,omitempty"`

	// Environment Filter by environment
	Environment *QueryEnvironment `form:"environment,omitempty" json:"environment,omitempty"`

	// State Filter by status
	State *QueryState `form:"state,omitempty" json:"state,omitempty"`

	// From Filter by executed from date
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To Filter by executed to date
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`
}

// GetReportsParamsSortDir defines parameters for GetReports.
type GetReportsParamsSortDir string

// UploadReportFormdataBody defines parameters for UploadReport.
type UploadReportFormdataBody struct {
	File *openapi_types.File `form:"file,omitempty" json:"file,omitempty"`
}

// UploadReportFormdataRequestBody defines body for UploadReport for application/x-www-form-urlencoded ContentType.
type UploadReportFormdataRequestBody UploadReportFormdataBody

// Temporary inclusion of type alias for backwards compatibility
type UploadReportJSONBody = UploadReportFormdataBody
