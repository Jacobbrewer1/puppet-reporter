// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/jacobbrewer1/uhttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a report
	// (POST /upload)
	PostUpload(w http.ResponseWriter, r *http.Request)
}

type RateLimiterFunc = func(http.ResponseWriter, *http.Request) error
type MetricsMiddlewareFunc = http.HandlerFunc
type ErrorHandlerFunc = func(http.ResponseWriter, *http.Request, error)

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	authz             ServerInterface
	handler           ServerInterface
	rateLimiter       RateLimiterFunc
	metricsMiddleware MetricsMiddlewareFunc
	errorHandlerFunc  ErrorHandlerFunc
}

// WithAuthorization applies the passed authorization middleware to the server.
func WithAuthorization(authz ServerInterface) ServerOption {
	return func(s *ServerInterfaceWrapper) {
		s.authz = authz
	}
}

// WithRateLimiter applies the rate limiter middleware to routes with x-global-rate-limit.
func WithRateLimiter(rateLimiter RateLimiterFunc) ServerOption {
	return func(s *ServerInterfaceWrapper) {
		s.rateLimiter = rateLimiter
	}
}

// WithErrorHandlerFunc sets the error handler function for the server.
func WithErrorHandlerFunc(errorHandlerFunc ErrorHandlerFunc) ServerOption {
	return func(s *ServerInterfaceWrapper) {
		s.errorHandlerFunc = errorHandlerFunc
	}
}

// WithMetricsMiddleware applies the metrics middleware to the server.
func WithMetricsMiddleware(middleware MetricsMiddlewareFunc) ServerOption {
	return func(s *ServerInterfaceWrapper) {
		s.metricsMiddleware = middleware
	}
}

// ServerOption represents an optional feature applied to the server.
type ServerOption func(s *ServerInterfaceWrapper)

// PostUpload operation middleware
func (siw *ServerInterfaceWrapper) PostUpload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	cw := uhttp.NewResponseWriter(w,
		uhttp.WithDefaultStatusCode(http.StatusOK),
		uhttp.WithDefaultHeader("X-Request-ID", uhttp.RequestIDFromContext(ctx)),
		uhttp.WithDefaultHeader(uhttp.HeaderContentType, uhttp.ContentTypeJSON),
	)

	defer func() {
		if siw.metricsMiddleware != nil {
			siw.metricsMiddleware(cw, r)
		}
	}()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.handler.PostUpload(cw, r)
	}))

	handler.ServeHTTP(cw, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// wrapHandler will wrap the handler with middlewares in the other specified
// making the execution order the inverse of the parameter declaration
func wrapHandler(handler http.HandlerFunc, middlewares ...mux.MiddlewareFunc) http.Handler {
	var wrappedHandler http.Handler = handler
	for _, middleware := range middlewares {
		if middleware == nil {
			continue
		}
		wrappedHandler = middleware(wrappedHandler)
	}
	return wrappedHandler
}

// RegisterHandlers registers the api handlers.
func RegisterHandlers(router *mux.Router, si ServerInterface, opts ...ServerOption) {
	wrapper := ServerInterfaceWrapper{
		handler: si,
	}

	for _, opt := range opts {
		if opt == nil {
			continue
		}
		opt(&wrapper)
	}

	router.Use(uhttp.AuthHeaderToContextMux())
	router.Use(uhttp.GenerateOrCopyRequestIDMux())

}

// RegisterUnauthedHandlers registers any api handlers which do not have any authentication on them. Most services will not have any.
func RegisterUnauthedHandlers(router *mux.Router, si ServerInterface, opts ...ServerOption) {
	wrapper := ServerInterfaceWrapper{
		handler: si,
	}

	for _, opt := range opts {
		if opt == nil {
			continue
		}
		opt(&wrapper)
	}

	router.Use(uhttp.AuthHeaderToContextMux())
	router.Use(uhttp.GenerateOrCopyRequestIDMux())

	// We do not have a gateway preparer here as no auth is sent.

	router.Methods(http.MethodPost).Path("/upload").Handler(wrapHandler(wrapper.PostUpload))
}
