// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"fmt"
	"time"

	"github.com/jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

// Report represents a row from 'report'.
type Report struct {
	Id            int       `db:"id,pk,autoinc"`
	Hash          string    `db:"hash"`
	Host          string    `db:"host"`
	PuppetVersion float64   `db:"puppet_version"`
	Environment   string    `db:"environment"`
	State         string    `db:"state"`
	ExecutedAt    time.Time `db:"executed_at"`
	Runtime       int       `db:"runtime"`
	Failed        int       `db:"failed"`
	Changed       int       `db:"changed"`
	Skipped       int       `db:"skipped"`
	Total         int       `db:"total"`
}

// Insert inserts the Report to the database.
func (m *Report) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Report"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO report (" +
		"`hash`, `host`, `puppet_version`, `environment`, `state`, `executed_at`, `runtime`, `failed`, `changed`, `skipped`, `total`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.Hash, m.Host, m.PuppetVersion, m.Environment, m.State, m.ExecutedAt, m.Runtime, m.Failed, m.Changed, m.Skipped, m.Total)
	res, err := db.Exec(sqlstr, m.Hash, m.Host, m.PuppetVersion, m.Environment, m.State, m.ExecutedAt, m.Runtime, m.Failed, m.Changed, m.Skipped, m.Total)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyReports(db DB, ms ...*Report) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Report"))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, []any{*m})
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable("report")).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// Save saves the Report to the database.
func (m *Report) Save(db DB) error {
	return m.Insert(db)
}

// Delete deletes the Report from the database.
func (m *Report) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Report"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM report WHERE `id` = ? AND `hash` = ? AND `host` = ? AND `puppet_version` = ? AND `environment` = ? AND `state` = ? AND `executed_at` = ? AND `runtime` = ? AND `failed` = ? AND `changed` = ? AND `skipped` = ? AND `total` = ?"

	DBLog(sqlstr, m.Id, m.Hash, m.Host, m.PuppetVersion, m.Environment, m.State, m.ExecutedAt, m.Runtime, m.Failed, m.Changed, m.Skipped, m.Total)
	_, err := db.Exec(sqlstr, m.Id, m.Hash, m.Host, m.PuppetVersion, m.Environment, m.State, m.ExecutedAt, m.Runtime, m.Failed, m.Changed, m.Skipped, m.Total)

	return err
}
