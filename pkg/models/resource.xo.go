// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"

	"github.com/jacobbrewer1/goschema/usql"
	"github.com/jacobbrewer1/patcher"
	"github.com/jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

const (
	// ResourceTableName is the name of the table for the Resource model.
	ResourceTableName = "resource"
)

// Resource represents a row from 'resource'.
type Resource struct {
	Id       int       `db:"id,pk,autoinc"`
	ReportId int       `db:"report_id"`
	Status   usql.Enum `db:"status"`
	Name     string    `db:"name"`
	Type     string    `db:"type"`
	File     string    `db:"file"`
	Line     int       `db:"line"`
}

// Insert inserts the Resource to the database.
func (m *Resource) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_" + ResourceTableName))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO resource (" +
		"`report_id`, `status`, `name`, `type`, `file`, `line`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.ReportId, m.Status, m.Name, m.Type, m.File, m.Line)
	res, err := db.Exec(sqlstr, m.ReportId, m.Status, m.Name, m.Type, m.File, m.Line)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyResources(db DB, ms ...*Resource) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_" + ResourceTableName))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, any(*m))
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable(ResourceTableName)).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *Resource) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the Resource in the database.
func (m *Resource) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_" + ResourceTableName))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE resource " +
		"SET `report_id` = ?, `status` = ?, `name` = ?, `type` = ?, `file` = ?, `line` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.ReportId, m.Status, m.Name, m.Type, m.File, m.Line, m.Id)
	res, err := db.Exec(sqlstr, m.ReportId, m.Status, m.Name, m.Type, m.File, m.Line, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the Resource to the database, and tries to update
// on unique constraint violations.
func (m *Resource) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_" + ResourceTableName))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO resource (" +
		"`report_id`, `status`, `name`, `type`, `file`, `line`" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`report_id` = VALUES(`report_id`), `status` = VALUES(`status`), `name` = VALUES(`name`), `type` = VALUES(`type`), `file` = VALUES(`file`), `line` = VALUES(`line`)"

	DBLog(sqlstr, m.ReportId, m.Status, m.Name, m.Type, m.File, m.Line)
	res, err := db.Exec(sqlstr, m.ReportId, m.Status, m.Name, m.Type, m.File, m.Line)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the Resource to the database.
func (m *Resource) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the Resource to the database, but tries to update
// on unique constraint violations.
func (m *Resource) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the Resource from the database.
func (m *Resource) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_" + ResourceTableName))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM resource WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// ResourceById retrieves a row from 'resource' as a Resource.
//
// Generated from primary key.
func ResourceById(db DB, id int) (*Resource, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("get_" + ResourceTableName + "_by_id"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `report_id`, `status`, `name`, `type`, `file`, `line` " +
		"FROM resource " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m Resource
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

type resourcePKWherer struct {
	ids []interface{}
}

func (m resourcePKWherer) Where() (string, []interface{}) {
	return "`id` = ?", m.ids
}

// Patch updates the Resource in the database.
//
// Generated from primary key.
func (m *Resource) Patch(db DB, newT *Resource) error {
	if newT == nil {
		return errors.New("new primary is nil")
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("patch_" + ResourceTableName))
	defer t.ObserveDuration()

	res, err := patcher.NewDiffSQLPatch(
		m,
		newT,
		patcher.WithTable(ResourceTableName),
		patcher.WithWhere(&resourcePKWherer{
			ids: []interface{}{m.Id},
		}),
		patcher.WithIgnoredFields(
			"Id",
		),
	)
	if err != nil {
		switch {
		case errors.Is(err, patcher.ErrNoChanges):
			return nil
		default:
			return fmt.Errorf("new diff sql patch: %w", err)
		}
	}

	sqlstr, args, err := res.GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to generate patch: %w", err)
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return fmt.Errorf("failed to execute patch: %w", err)
	}

	return nil
}

// GetReportIdReport Gets an instance of Report
//
// Generated from constraint resource_report_id_fk
func (m *Resource) GetReportIdReport(db DB) (*Report, error) {
	return ReportById(db, m.ReportId)
}

// GetAllResources retrieves all rows from 'resource' as a slice of Resource.
//
// Generated from table 'resource'.
func GetAllResources(db DB, filters ...any) ([]*Resource, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("get_all_" + ResourceTableName))
	defer t.ObserveDuration()

	args := make([]any, 0)
	builder := new(strings.Builder)
	builder.WriteString("SELECT `t.id`, `t.report_id`, `t.status`, `t.name`, `t.type`, `t.file`, `t.line`")

	if len(filters) > 0 {
		for _, filter := range filters {
			if joiner := filter.(patcher.Joiner); joiner != nil {
				joinSql, joinArgs := joiner.Join()
				builder.WriteString(joinSql)
				args = append(args, joinArgs...)
			}
		}
	}

	builder.WriteString("\nFROM resource t")

	if len(filters) > 0 {
		builder.WriteString("\nWHERE\n")
		for i, filter := range filters {
			if where := filter.(patcher.Wherer); where != nil {
				if i > 0 {
					wtStr := patcher.WhereTypeAnd
					if wt, ok := filter.(patcher.WhereTyper); ok {
						wtStr = wt.WhereType()
					}
					builder.WriteString(string(" " + wtStr + " "))
				}
				whereSql, whereArgs := where.Where()
				builder.WriteString(whereSql)
				builder.WriteString("\n")
				args = append(args, whereArgs...)
			}
		}
	}

	sqlstr := builder.String()
	DBLog(sqlstr, args...)

	m := make([]*Resource, 0)
	if err := db.Select(&m, sqlstr, args...); err != nil {
		return nil, fmt.Errorf("failed to get all Resource: %w", err)
	}

	return m, nil
}

// Valid values for the 'Status' enum column
var (
	ResourceStatusSkipped   = usql.NewEnum("SKIPPED")
	ResourceStatusChanged   = usql.NewEnum("CHANGED")
	ResourceStatusFailed    = usql.NewEnum("FAILED")
	ResourceStatusUnchanged = usql.NewEnum("UNCHANGED")
)
