// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"fmt"

	"github.com/jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

// Resource represents a row from 'resource'.
type Resource struct {
	Id       int    `db:"id,pk,autoinc"`
	ReportId int    `db:"report_id"`
	Name     string `db:"name"`
	Type     string `db:"type"`
	File     string `db:"file"`
	Line     int    `db:"line"`
}

// Insert inserts the Resource to the database.
func (m *Resource) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_Resource"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO resource (" +
		"`report_id`, `name`, `type`, `file`, `line`" +
		") VALUES (" +
		"?, ?, ?, ?, ?" +
		")"

	DBLog(sqlstr, m.ReportId, m.Name, m.Type, m.File, m.Line)
	res, err := db.Exec(sqlstr, m.ReportId, m.Name, m.Type, m.File, m.Line)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyResources(db DB, ms ...*Resource) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_Resource"))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, []any{*m})
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable("resource")).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// Save saves the Resource to the database.
func (m *Resource) Save(db DB) error {
	return m.Insert(db)
}

// Delete deletes the Resource from the database.
func (m *Resource) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_Resource"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM resource WHERE `id` = ? AND `report_id` = ? AND `name` = ? AND `type` = ? AND `file` = ? AND `line` = ?"

	DBLog(sqlstr, m.Id, m.ReportId, m.Name, m.Type, m.File, m.Line)
	_, err := db.Exec(sqlstr, m.Id, m.ReportId, m.Name, m.Type, m.File, m.Line)

	return err
}
