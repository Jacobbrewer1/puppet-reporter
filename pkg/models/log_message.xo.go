// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"

	"github.com/jacobbrewer1/patcher"
	"github.com/jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

const (
	// LogMessageTableName is the name of the table for the LogMessage model.
	LogMessageTableName = "log_message"
)

// LogMessage represents a row from 'log_message'.
type LogMessage struct {
	Id       int    `db:"id,pk,autoinc"`
	ReportId int    `db:"report_id"`
	Message  string `db:"message"`
}

// Insert inserts the LogMessage to the database.
func (m *LogMessage) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_" + LogMessageTableName))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO log_message (" +
		"`report_id`, `message`" +
		") VALUES (" +
		"?, ?" +
		")"

	DBLog(sqlstr, m.ReportId, m.Message)
	res, err := db.Exec(sqlstr, m.ReportId, m.Message)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyLogMessages(db DB, ms ...*LogMessage) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_" + LogMessageTableName))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, any(*m))
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable(LogMessageTableName)).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *LogMessage) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the LogMessage in the database.
func (m *LogMessage) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_" + LogMessageTableName))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE log_message " +
		"SET `report_id` = ?, `message` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.ReportId, m.Message, m.Id)
	res, err := db.Exec(sqlstr, m.ReportId, m.Message, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the LogMessage to the database, and tries to update
// on unique constraint violations.
func (m *LogMessage) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_" + LogMessageTableName))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO log_message (" +
		"`report_id`, `message`" +
		") VALUES (" +
		"?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`report_id` = VALUES(`report_id`), `message` = VALUES(`message`)"

	DBLog(sqlstr, m.ReportId, m.Message)
	res, err := db.Exec(sqlstr, m.ReportId, m.Message)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the LogMessage to the database.
func (m *LogMessage) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the LogMessage to the database, but tries to update
// on unique constraint violations.
func (m *LogMessage) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the LogMessage from the database.
func (m *LogMessage) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_" + LogMessageTableName))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM log_message WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// LogMessageById retrieves a row from 'log_message' as a LogMessage.
//
// Generated from primary key.
func LogMessageById(db DB, id int) (*LogMessage, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("get_" + LogMessageTableName + "_by_id"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `report_id`, `message` " +
		"FROM log_message " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m LogMessage
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

type logMessagePKWherer struct {
	ids []interface{}
}

func (m logMessagePKWherer) Where() (string, []interface{}) {
	return "`id` = ?", m.ids
}

// Patch updates the LogMessage in the database.
//
// Generated from primary key.
func (m *LogMessage) Patch(db DB, newT *LogMessage) error {
	if newT == nil {
		return errors.New("new primary is nil")
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("patch_" + LogMessageTableName))
	defer t.ObserveDuration()

	res, err := patcher.NewDiffSQLPatch(
		m,
		newT,
		patcher.WithTable(LogMessageTableName),
		patcher.WithWhere(&logMessagePKWherer{
			ids: []interface{}{m.Id},
		}),
		patcher.WithIgnoredFields(
			"Id",
		),
	)
	if err != nil {
		switch {
		case errors.Is(err, patcher.ErrNoChanges):
			return nil
		default:
			return fmt.Errorf("new diff sql patch: %w", err)
		}
	}

	sqlstr, args, err := res.GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to generate patch: %w", err)
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return fmt.Errorf("failed to execute patch: %w", err)
	}

	return nil
}

// GetReportIdReport Gets an instance of Report
//
// Generated from constraint log_message_report_id_fk
func (m *LogMessage) GetReportIdReport(db DB) (*Report, error) {
	return ReportById(db, m.ReportId)
}

// GetAllLogMessages retrieves all rows from 'log_message' as a slice of LogMessage.
//
// Generated from table 'log_message'.
func GetAllLogMessages(db DB, wheres ...patcher.Wherer) ([]*LogMessage, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("get_all_" + LogMessageTableName))
	defer t.ObserveDuration()

	args := make([]any, 0)
	builder := new(strings.Builder)
	builder.WriteString("SELECT `id`, `report_id`, `message`")
	builder.WriteString(" FROM log_message t")

	if len(wheres) > 0 {
		builder.WriteString(" WHERE ")
		for i, where := range wheres {
			if i > 0 {
				wtStr := patcher.WhereTypeAnd // default to AND
				wt, ok := where.(patcher.WhereTyper)
				if ok && wt.WhereType().IsValid() {
					wtStr = wt.WhereType()
				}
				builder.WriteString(string(wtStr) + " ")
			}
			whereStr, whereArgs := where.Where()
			builder.WriteString(whereStr)
			args = append(args, whereArgs...)
		}
	}

	sqlstr := builder.String()
	DBLog(sqlstr, args...)

	m := make([]*LogMessage, 0)
	if err := db.Select(&m, sqlstr, args...); err != nil {
		return nil, fmt.Errorf("failed to get all LogMessage: %w", err)
	}

	return m, nil
}
