// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"fmt"

	"github.com/jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

// LogMessage represents a row from 'log_message'.
type LogMessage struct {
	Id       int    `db:"id,pk,autoinc"`
	ReportId int    `db:"report_id"`
	Message  string `db:"message"`
}

// Insert inserts the LogMessage to the database.
func (m *LogMessage) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_LogMessage"))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO log_message (" +
		"`report_id`, `message`" +
		") VALUES (" +
		"?, ?" +
		")"

	DBLog(sqlstr, m.ReportId, m.Message)
	res, err := db.Exec(sqlstr, m.ReportId, m.Message)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyLogMessages(db DB, ms ...*LogMessage) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_LogMessage"))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, []any{*m})
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable("log_message")).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// Save saves the LogMessage to the database.
func (m *LogMessage) Save(db DB) error {
	return m.Insert(db)
}

// Delete deletes the LogMessage from the database.
func (m *LogMessage) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_LogMessage"))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM log_message WHERE `id` = ? AND `report_id` = ? AND `message` = ?"

	DBLog(sqlstr, m.Id, m.ReportId, m.Message)
	_, err := db.Exec(sqlstr, m.Id, m.ReportId, m.Message)

	return err
}
