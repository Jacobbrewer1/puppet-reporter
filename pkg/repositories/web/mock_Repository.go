// Code generated by mockery. DO NOT EDIT.

package api

import (
	time "time"

	models "github.com/jacobbrewer1/puppet-reporter/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetLatestUniqueReportHosts provides a mock function with given fields: start, end
func (_m *MockRepository) GetLatestUniqueReportHosts(start time.Time, end time.Time) ([]*models.Report, error) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestUniqueReportHosts")
	}

	var r0 []*models.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]*models.Report, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []*models.Report); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportsInPeriod provides a mock function with given fields: start, end
func (_m *MockRepository) GetReportsInPeriod(start time.Time, end time.Time) ([]*models.Report, error) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetReportsInPeriod")
	}

	var r0 []*models.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]*models.Report, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []*models.Report); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
