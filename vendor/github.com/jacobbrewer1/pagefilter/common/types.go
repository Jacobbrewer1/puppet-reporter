// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package common

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/jacobbrewer1/uhttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// FromDate defines the model for from_date.
type FromDate = openapi_types.Date

// LastId defines the model for last_id.
type LastId = string

// LastValue defines the model for last_value.
type LastValue = string

// LimitParam defines the model for limit_param.
type LimitParam = string

// Since defines the model for since.
type Since = string

// SortBy defines the model for sort_by.
type SortBy = string

// SortDirection defines the model for sort_direction.
type SortDirection string

// List of SortDirection
const (
	SortDirectionAsc  SortDirection = "asc"
	SortDirectionDesc SortDirection = "desc"
)

func (e *SortDirection) IsValid() bool {
	if e == nil {
		return false
	}

	switch *e {
	case SortDirectionAsc:
		return true
	case SortDirectionDesc:
		return true
	default:
		return false
	}
}

func (e *SortDirection) MarshalJSON() ([]byte, error) {
	if !e.IsValid() {
		return nil, uhttp.NewHTTPError(http.StatusInternalServerError, fmt.Errorf("%s is not a valid SortDirection", *e))
	}

	return json.Marshal(string(*e))
}

func (e *SortDirection) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	e2 := SortDirection(s)
	if !e2.IsValid() {
		return uhttp.NewHTTPError(http.StatusBadRequest, fmt.Errorf("%s is not a valid SortDirection", s),
			"Valid values are:",
			SortDirectionAsc,
			SortDirectionDesc,
		)
	}

	*e = e2
	return nil
}
